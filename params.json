{"name":"Llad","tagline":"Linux Log Action Daemon (watch logfiles and take actions on patterns)","body":"The Linux Log Action Daemon is a little tool allowing to use log files as a\r\nsource of events. Based on a config file, llad watches several logfiles and\r\nexecutes some custom actions as soon as a pattern matches a new log line.\r\n\r\nThe patterns are given as perl compatible regular expressions. The matching\r\npart of a log line, as well as any matchings for \"capture groups\", are fed to\r\nthe executed command as commandline arguments. Output of the command is\r\ncaptured and logged to the \"daemon\" log facility.\r\n\r\nA major design goal of llad is robustness -- all executed actions are monitored\r\nand cancelled, if they exceed some configurable timeouts.\r\n\r\nAll llad code is released under the terms of the 2-clause BSD license.\r\n\r\n### Current state\r\n\r\nllad is ready for production use according to my own tests, but not yet tested\r\nin the field. Therefore, there's no \"release\" yet. The files in debian/ will\r\ncreate a Debian package with version number 0.9 -- the first official release\r\nwill be 1.0.\r\n\r\n## Installation\r\n\r\n### Prerequisites\r\n\r\nIn order to build llad, you need the following libraries:\r\n\r\n- libpopt\r\n\r\n- libpcre\r\n\r\nFor running it, you need a Linux kernel (>= 2.6.36) that provides the inotify\r\nAPI.\r\n\r\n### Quick installation\r\n\r\nUse the following commands:\r\n\r\n\tmake\r\n\tmake install\r\n\r\n### Build configuration\r\n\r\nThe Makefile (GNU make) understands the following options for \"make\":\r\n\r\n- DEBUG=1: create a build with debugging info\r\n\r\n- prefix={path} (default: /usr/local) the prefix for the running installation\r\n\r\n- sysconfdir={path} (default: {prefix}/etc) the location of configuration\r\n  files. llad creates its own subdirectory \"llad\" and commands for executing\r\n  are in {sysconfdir}/llad/command by default.\r\n\r\n- localstatedir={path} (default: {prefix}/var) -- this is used for the default\r\n  location of llad's pidfile ({localstatedir}/run/llad.pid).\r\n\r\n### Install configuration\r\n\r\n\"make install\" should receive the SAME options given to \"make\". Furthermore,\r\nthe option \"DESTDIR\" is supported. This is mainly interesting for package\r\nbuilders -- DESTDIR will be prepended to any path while installing.\r\n\r\n## Further documentation\r\n\r\nSee the files in \"examples\".\r\n\r\n## Why? The idea\r\n\r\nI have a Linux based router/firewall and once in a while (every few months)\r\nthe NIC driver goes crazy. Networking has to be restarted manually to get it\r\nback to work. This is annoying, need a serial terminal for this, so I came up\r\nwith a quick and dirty daemon created in perl that just watches\r\n/var/log/messages for NETDEV WATCHDOG entries and restarts the networking\r\nautomatically.\r\n\r\nWell, a nice hack, but I wanted a more solid solution, so why not create a\r\ndaemon for watching any logfile you want (or, multiple logfiles at a time),\r\nlooking for user-defined patterns and taking actions given in a configuration\r\nfile. This is what llad does.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}